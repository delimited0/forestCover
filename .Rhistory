as.ts
ts
quarterlyReturn(
ts(eps), period='quarterly')
2.13+6.52-4.17
4.48/3
1.0149333^3
4.48+2.04
6.52/4
1.0063^4
1.0163^4
.5/.47
(.5/.47)^4
(.5/.47)^3
(.49/.47)^3
(.49/.47)^3
beta1 = c(6.892218322,9.763212333,9.335435189,3.977958995,4.069118812,5.833381533,5.139766384,9.810469437,9.724008133,-0.518822829)
beta1 = c(6.892218322, 9.763212333, 9.335435189,3.977958995,4.069118812,5.833381533,.139766384,9.810469437,9.724008133,-0.518822829)
beta2 = c(11.53618648,          0.013283929,          6.897925742,          -5.4314858,          10.77991125,          12.69894369,          0.868052413,          11.95187264,          10.60233994,          12.11825464)
beta2 = c(11.53618648,0.013283929,6.897925742,-5.4314858,10.77991125,12.69894369,0.868052413,11.95187264,10.60233994,12.11825464)
mean(beta1)
mean(beta2)
std
var(beta1)
sqrt(var(beta1))
sqrt(var(beta1))/sqrt(10)
sqrt(var(beta2))/sqrt(10)
var(beta1)
var(beta2)
help(t.test)
(mean(beta1) - mean(beta2))/sqrt((var(beta1)/10)+(var(beta2)/10))
t.test(beta1,beta2,alternative="less")
t.test(beta1,beta2,alternative="two.sided")
beta1 = c(7.353820576,9.677241377,9.533055819,9.479390315,8.996614501,5.533426885,9.998609112,9.939187792,9.238665901,8.488671714)
beta2 = c(8.896192513,12.08286323,5.503548446,3.468794014,10.32542948,7.375058502,11.87206848,13.45930128,10.48406265,10.24581381)
beta.diff = beta1 - beta2
beta.diff
mean(beta.diff)
var(beta.diff)
t.test(beta.diff, "less")
t.test(x=beta.diff, "less")
t.test(x=beta.diff,y=NULL, "less")
beta1 = c(9.385604099,9.491652995,10.03119475,8.422846187,8.996614501,9.482221245,9.571759304,9.477567641,6.758498457,9.922102963)
beta2 = c(11.46228262,11.17376848,11.76707005,10.02874493,10.32542948,11.49999179,7.492278456,11.76867543,7.126989871,13.06529351)
beta.diff = beta1 - beta2
help(t.test)
t.test(beta.diff,y=NULL,alternative="two.sided")
mean(beta.diff)
variance(beta.diff)
var(beta.diff)
hist(beta.diff)
t.test(beta.diff,y=NULL,alternative="less")
beta.diff = c(-4.263015135,-1.918942076,5.174411704,-2.122912145,-2.389566294,-1.606280552,-1.299332721,-4.866446209,0.092363926,-2.274283635)
t.test(beta.diff,y=NULL,alternative="less")
t.test(beta.diff,y=NULL,alternative="two")
t.test(beta.diff,y=NULL,alternative="two.sided")
t.test(beta.diff,y=NULL,alternative="less")
t.test(beta.diff,y=NULL,alternative="two.sided")
beta1 = c(6.89,9.76,9.34,3.98,4.07,5.83,5.14,9.81,9.72,-0.52)
beta2 = c(11.54,0.01,6.90,-5.43,10.78,12.7,0.87,11.95,10.60,12.12)
t.test(beta1,beta2,alternative="two.sided")
setwd("~/Documents/Thesis")
# Load and pre-process thesis data
setwd("~/Documents/Thesis")
source('~/Documents/Thesis/code/dayRet.R')
source('~/Documents/Thesis/code/kDayVol.R')
source('~/Documents/Thesis/code/kDayDocVol.R')
source('~/Documents/Thesis/code/interVol.R')
sp500 = read.csv("data/sp500.csv")
sp500$Date = as.Date(sp500$Date)
sp500 = sp500[nrow(sp500):1,]  # reverse data
beigebook = read.table("data/beigebook.txt",sep="\t", header=TRUE)
beigebook$Date = as.Date(beigebook$Date, origin="1904-01-01")
# calculate volatility
# y = kDayDocVol(sp500$Adj.Close, sp500$Date, beigebook$Date, 21)
# rmidx = which(is.na(y))
# y = y[!is.na(y)]  # remove documents with no associated volatility
# beigebook = beigebook[-rmidx,]
# numdocs = dim(beigebook)[1]
y = interVol(sp500$Adj.Close, sp500$Date, beigebook$Date)
beigebook = beigebook[-nrow(beigebook),]
# dtm
library("tm", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("RTextTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
dtm = create_matrix(beigebook$Text, removeNumbers=TRUE, removePunctuation=TRUE,removeStopwords=TRUE,
stemWords=TRUE, stripWhitespace=TRUE, toLower=TRUE, minWordLength=3)
dtm = removeSparseTerms(dtm, .95)
tf = colSums(as.matrix(dtm))
tf.order = tf[order(tf)]
# train and test
train.x = dtm[1:230,]
test.x = dtm[231:250,]
train.y = y[1:230]
test.y = y[231:250]
head(beigebook)
colnames(beigebook)
beigebook$Date
beigebook$Date[2] - beigebook$Date[1]
beigebook$Date[3] - beigebook$Date[2]
beigebook$Date[230] - beigebook$Date[2229]
beigebook$Date[230] - beigebook$Date[229]
day.diff = rep(NA, length(beigebook$Date)-1)
for (i in 2:length(beigebook$Date)) {
day.diff[i] = beigebook$Date[i] - beigebook$Date[i-1]
}
day.diff
length(day.diff)
hist(day.diff)
boxplot(day.diff)
var(day.diff)
var(day.diff(!is.na(day.diff)))
var(day.diff[!is.na(day.diff]))
var(day.diff[!is.na(day.diff)])
sqrt(var(day.diff[!is.na(day.diff)]))
library("rugarch", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
help(ugarchspec)
args(ugarchspec)
sp500garch = ugarchspec(mean.model=list(armaOrder=c(0,0)))
show(sp500garch)
sp500
colnames(sp500)
sp500rets = dayRets(sp500$Adj.Close)
sp500rets = dayRet(sp500$Adj.Close)
sp500gfit = ugarchfit(sp500garch,sp500rets)
sp500gfit = ugarchfit(sp500garch,sp500rets[-is.na(sp500rets)])
show(sp500gfit)
source('~/Documents/Thesis/code/rollingLassoPredict.R')
source('~/Documents/Thesis/code/rollingLassoPredict.R')
source('~/Documents/Thesis/code/rollingLassoPredict.R')
c(5,4,6) - 3
source('~/Documents/Thesis/code/rollingPrevVol.R')
source('~/Documents/Thesis/code/rollingPrevVol.R')
error.prev = rollingPrevVol(y,1,10)
source('~/Documents/Thesis/code/rollingPrevVol.R')
error.prev = rollingPrevVol(y,1,10)
boxplot(error.prev)
plot(error.prev)
source('~/Documents/Thesis/code/rollingLassoPredict.R')
source('~/Documents/Thesis/code/rollingLassoPredict.R')
error.lasso = rollingLassoPredict(as.matrix(dtm), y, 100, 10)
library("glmnet", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
error.lasso = rollingLassoPredict(as.matrix(dtm), y, 100, 10)
boxplot(error.lasso)
mean(error.prev)
mean(error.lasso)
median(error.prev)
median(error.lasso)
var(error.prev)
var(error.lasso)
error.prev = rollingPrevVol(y,100,10)
mean(error.prev)
error.prev = rollingPrevVol(y,1,1)
mean(error.prev)
error.lasso = rollingLassoPredict(as.matrix(dtm), y, 100, 1)
error.lasso = rollingLassoPredict(as.matrix(dtm), y, 100, 10)
error.lasso = rollingLassoPredict(as.matrix(dtm), y, 100, 1)
error.lasso = rollingLassoPredict(as.matrix(dtm), y, 100, 1)
length(train.x)
dim(train.n)
dim(train.x)
length(train.y)
dim(test.x)
i
train.n
pred.n
debugSource('~/Documents/Thesis/code/rollingLassoPredict.R')
length(error.prev)
tail(error.prev)
error.prev = rollingPrevVol(y,1,1)
train
train
test
error
i
train.n
-
;
train.n-1
1:0
i
y[i:0]
y
debugSource('~/Documents/Thesis/code/rollingPrevVol.R')
debugSource('~/Documents/Thesis/code/rollingPrevVol.R')
error.prev = rollingPrevVol(y,1,1)
error.prev = rollingPrevVol(y,1,1)
y
y[i:train.n]
train.n
debugSource('~/Documents/Thesis/code/rollingPrevVol.R')
error.prev = rollingPrevVol(y,1,1)
train
y[1]
train
train
train
y[2]
error.prev = rollingPrevVol(y,1,1)
mean(error.prev)
plot(error.prev)
length(error.prev)
tail(error.prev)
source('~/Documents/Thesis/code/rollingPrevVol.R')
error.prev = rollingPrevVol(y,1,1)
length(error.lasso)
source('~/Documents/Thesis/code/rollingLassoPredict.R')
source('~/Documents/Thesis/code/rollingPrevVol.R')
source('~/Documents/Thesis/code/rollingPrevVol.R')
error.prev = rollingPrevVol(y,1,1)
length(error.prev)
error.prev = rollingPrevVol(y,1,1)
train
y[1]
test
y[2]
train
step
train
y[2]
test
y[3]
error.prev = rollingPrevVol(y,1,1)
mean(error.prev)
boxplot(error.prev)
plot(error.prev)
source('~/Documents/Thesis/code/rollingLassoPredict.R')
source('~/Documents/Thesis/code/rollingLassoPredict.R')
error.lasso = rollingLassoPredict(as.matrix(dtm), y, 100, 1)
error.lasso = rollingLassoPredict(as.matrix(dtm), y, 100, 1)
train.x
dim(train.x)
dim(test.x)
i+train.n
i+train.n+pred.n
i+train.n+pred.n-1
x[(i+train.n):(i+train.n+pred.n-1)]
x[(i+train.n):(i+train.n+pred.n-1),]
test.x
train.y
dim(train.y)
size(train.y)
length(train.y)
length(test.x)
typeof(test.x)
source('~/Documents/Thesis/code/rollingLassoPredict.R')
error.lasso = rollingLassoPredict(as.matrix(dtm), y, 100, 1)
error.lasso = rollingLassoPredict(as.matrix(dtm), y, 100, 1)
test.x
as.matrix(test.x)
typeof(test.x)
debugSource('~/Documents/Thesis/code/rollingLassoPredict.R')
error.lasso = rollingLassoPredict(as.matrix(dtm), y, 100, 1)
mean(error.lasso)
mean(err0r.prev)
mean(error.prev)
plot(error.lasso)
source('~/Documents/Thesis/code/rollingPrevVol.R')
source('~/Documents/Thesis/code/rollingPrevVol.R')
source('~/Documents/Thesis/code/rollingLassoPredict.R')
source('~/Documents/Thesis/code/rollingLassoPredict.R')
source('~/Documents/Thesis/code/rollingPrevVol.R')
source('~/Documents/Thesis/code/rollingPrevVol.R')
source('~/Documents/Thesis/code/rollingPrevVol.R')
error.prev = rollingPrevVol(y,1,1,100)
error.prev = rollingPrevVol(y,1,1,100)
source('~/Documents/Thesis/code/rollingPrevVol.R')
error.prev = rollingPrevVol(y,1,1,100)
length(error.lasso)
length(error.prev)
tail(error.prev)
source('~/Documents/Thesis/code/rollingPrevVol.R')
error.prev = rollingPrevVol(y,1,1,100)
length(error.prev)
mean(error.prev)
source('~/Documents/Thesis/code/rollingPrevVol.R')
mean(error.lasso)
length(error.prev)
plot.new()
lines(error.lasso)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
qplot(error.prev)
qplot(1:150,error.prev)
qplot(1:150,error.prev) + qplot(1:150,error.lasso,col="r")
plot(error.prev)
points(error.lasso,col="b")
points(error.lasso,col="r")
points(error.lasso,col="red")
boxplot(cbind(error.prev, error.lasso))
help(boxplot)
boxplot(cbind(error.prev, error.lasso), range = 1.1)
boxplot(cbind(error.prev, error.lasso), range = 1)
boxplot(cbind(error.prev, error.lasso), outline=F)
error.prev(y,1,10,100)
error.prev = rollingPrevVOl(y,1,10,100)
error.prev = rollingPrevVol(y,1,10,100)
error.lasso = rollingLassoPredict(dtm,y,100,10)
error.lasso = rollingLassoPredict(as.matrix(dtm),y,100,10)
boxplot(cbind(error.prev, error.lasso), outline=F)
length(error.prev)
length(error.lasso)
source('~/Documents/Thesis/code/rollingLassoPredict.R')
source('~/Documents/Thesis/code/rollingLassoPredict.R')
source('~/Documents/Thesis/code/rollingLassoPredict.R')
library("randomForest", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
help(randomForest)
source('~/Documents/Thesis/code/rollingRFPredict.R')
rollingRFPRedict(as.matrix(dtm),y,100,10)
rollingRFPredict(as.matrix(dtm),y,100,10)
error.rf = rollingRFPredict(as.matrix(dtm),y,100,10)
length(error.rf)
boxplot(cbind(error.prev, error.lasso, error.rf), outline=F)
plot(error.rf)
points(error.prev, col="r")
points(error.prev, col="red")
points(error.lasso, col="blue")
plot(error.lasso - error.rf)
plot(error.lasso - error.prev)
abline(0)
help(abline)
abline(0,0)
plot(error.rf - error.prev)
abline(0,0)
mean(error.rf)
mean(error.lasso)
mean(error.prev)
hist(error.prev)
hist(error.lasso)
hist(error.rf)
library("lda", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("mda", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
marstest = mars(as.matrix(train.x), train.y)
marstest.pred = predict(marstest, test.x)
train.x = as.matrix(train.x)
test.x = as.matrix(test.x)
lassoreg = cv.glmnet(x=train.x, y=train.y, family="gaussian",
alpha=0)
lassoreg.pred = predict(lassoreg, newx=test.x,
s="lambda.min")
lassoreg.mse = mean((lassoreg.pred - test.y)^2)
summary(lassoreg.pred)
min(lassoreg.pred)
lassoreg.mse
marstest.pred
train.y
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
svmtest = svm(as.matrix(train.x), train.y)
svm.pred = predict(svmtest, as.matrix(test.x))
mean((svm.pred - test.y)^2)
source('~/Documents/Thesis/code/rollingSVMPredict.R')
source('~/Documents/Thesis/code/rollingSVMPredict.R', echo=TRUE)
error.svm = rollingSVMPredict(as.matrix(dtm),y,100,10)
source('~/Documents/Thesis/code/rollingSVMPredict.R')
error.svm = rollingSVMPredict(as.matrix(dtm),y,100,10)
source('~/Documents/Thesis/code/rollingSVMPredict.R')
error.svm = rollingSVMPredict(as.matrix(dtm),y,100,10)
boxplot(cbind(error.lasso,error.rf,error.svm,error.prev))
boxplot(cbind(error.lasso,error.rf,error.svm,error.prev), OUTLINE=F)
help(boxplot)
boxplot(cbind(error.lasso,error.rf,error.svm,error.prev), OUTLINE=FALSE)
boxplot(cbind(error.lasso,error.rf,error.svm,error.prev), outline=FALSE)
help(svm)
source('~/Documents/Thesis/code/rollingSVMPredict.R')
error.svm = rollingSVMPredict(as.matrix(dtm),y,100,10)
boxplot(cbind(error.lasso,error.rf,error.svm,error.prev), outline=FALSE)
source('~/Documents/Thesis/code/rollingSVMPredict.R')
error.svm = rollingSVMPredict(as.matrix(dtm),y,100,10)
boxplot(cbind(error.lasso,error.rf,error.svm,error.prev), outline=FALSE)
source('~/Documents/Thesis/code/rollingSVMPredict.R')
error.svm = rollingSVMPredict(as.matrix(dtm),y,100,10)
boxplot(cbind(error.lasso,error.rf,error.svm,error.prev), outline=FALSE)
source('~/Documents/Thesis/code/rollingSVMPredict.R')
error.svm = rollingSVMPredict(as.matrix(dtm),y,100,10)
boxplot(cbind(error.lasso,error.rf,error.svm,error.prev), outline=FALSE)
help(svm)
source('~/Documents/Thesis/code/rollingSVMPredict.R')
help(svm)
boxplot(cbind(error.lasso,error.rf,error.svm,error.prev), outline=FALSE)
error.svm = rollingSVMPredict(as.matrix(dtm),y,100,10)
source('~/Documents/Thesis/code/rollingSVMPredict.R')
source('~/Documents/Thesis/code/rollingSVMPredict.R')
error.svm = rollingSVMPredict(as.matrix(dtm),y,100,10)
boxplot(cbind(error.lasso,error.rf,error.svm,error.prev), outline=FALSE)
error.svm
head(error.svm)
source('~/Documents/Thesis/code/rollingSVMPredict.R')
error.svm = rollingSVMPredict(as.matrix(dtm),y,100,10)
boxplot(cbind(error.lasso,error.rf,error.svm,error.prev), outline=FALSE)
install.packages("~/Documents/Thesis/code/h2o_2.4.3.11.tar.gz", repos = NULL, type = "source")
install.packages("RCurl")
install.packages("~/Documents/Thesis/code/h2o_2.4.3.11.tar.gz", repos = NULL, type = "source")
library("h2o", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
max(c(1,2,3))
localH20 = new(“H2OClient”, ip = “127.0.0.1”, port = 54321)
localH20 = new("H2OClient", ip = "127.0.0.1", port = 54321)
h2o.checkClient(localH2O)
h20
h2o
h2o.checkClient(localH20)
checkClient
demo(h2o.glm)
h2o
h2o.deeplearning
help(h2o.deeplearning)
dtm.h2o = cbind(y,as.matrix(dtm))
dim(dtm.h2o)
dtm.h2o[,1]
dtm.h2o = as.h2o(localH2O,dtm.h2o,key='dtm.h2o')
deepnet = h2o.deeplearning(x=2:)
dim(dtm.h2o)
deepnet = h2o.deeplearning(x=2:1161,y=1,data=dtm.h2o,classification=FALSE,activation="Tanh",hidden=c(20,20,20),epochs=1000)
a = c(1,2,3,4,5)
a[end]
a[-1]
dtm.h2o
dtm.h2o[1:10,]
deep
dim(dtm.h2o)
dim(dtm.h2o)[2]
source('~/Documents/Thesis/code/rollingDeepPredict.R')
error.deep = rollingDeepPredict(as.matrix(dtm), y, 100,10)
source('~/Documents/Thesis/code/rollingDeepPredict.R')
error.deep = rollingDeepPredict(as.matrix(dtm), y, 100,10)
colnames(dtm)
which(colnames(dtm) == "predict"
)
source('~/Documents/Thesis/code/rollingDeepPredict.R')
source('~/Documents/Thesis/code/rollingDeepPredict.R')
colnames(as.matrix(dtm))
error.deep = rollingDeepPredict(as.matrix(dtm), y, 100,10)
source('~/Documents/Thesis/code/rollingDeepPredict.R')
as.vector
source('~/Documents/Thesis/code/rollingDeepPredict.R')
error.deep = rollingDeepPredict(as.matrix(dtm), y, 100,10)
source('~/Documents/Thesis/code/rollingDeepPredict.R')
error.deep = rollingDeepPredict(as.matrix(dtm), y, 100,10)
h2o
h2o.predict(deepnet,train.x)
h2o.predict(deepnet,dtm.h2o)
colnames(dtm.h2o)[778] = "predict."
h2o.predict(deepnet,dtm.h2o)
colnames(dtm.h2o)[778]
colnames(dtm.h2o)[778] = "abcd"
h2o.predict(deepnet,dtm.h2o)
source('~/Documents/Thesis/code/rollingDeepPredict.R')
error.deep = rollingDeepPredict(as.matrix(dtm), y, 100,10)
train.x.h2o = as.h2o(localH2O,train.x,key='train.x')
test.x.h2o = as.h2o(localH2O,test.x,key='test.x')
traindata = cbind(train.y,train.x)
train.h2o = as.h2o(localH2O,traindata,key='train')
testdata = cbind(test.y,test.x)
test.h2o = as.h2o(localH2O,testdata,key='test')
train
'train'
deepnet = h2o.deeplearning(x=2:1161,y=1,data=train.h2o,activation="Tanh",)
deepnet = h2o.deeplearning(x=2:1161,y=1,data=train.h2o,activation="Tanh",classification=F,hidden=c(50,50,50))
deepnet.pred = h2o.predict(deepnet, testdata)
> test.h2o = as.h2o(localH2O,test.x,key='test')
> test.h2o = as.h2o(localH2O,test.x,key='test')
test.h2o = as.h2o(localH2O,test.x,key='test')
deepnet.pred = h2o.predict(deepnet, test.h2o)
colnames
colnames(train.x)[778] = "predicta"
colnames(test.x)[778] = "predicta"
traindata = cbind(train.y,train.x)
train.h2o = as.h2o(localH2O,traindata,key='train')
> test.h2o = as.h2o(localH2O,test.x,key='test')
test.h2o = as.h2o(localH2O,test.x,key='test')
deepnet = h2o.deeplearning(x=2:1161,y=1,data=train.h2o,activation="Tanh",classification=F,hidden=c(50,50,50))
deepnet.pred = h2o.predict(deepnet, test.h2o)
deepnet.pred
as.data.frame(deepnet.pred)
as.data.frame(deepnet.pred)$predict
typeof(as.data.frame(deepnet.pred)$predict)
preds = as.data.frame(deepnet.pred)$predict
mean((preds - test.y)^2)
source('~/Documents/Thesis/code/rollingDeepPredict.R')
error.deep = rollingDeepPredict(as.matrix(dtm),y,100,10)
train.h2o[1,]
as.data.frame(train.h2o[1,])
colnames(as.data.frame(train.h2o[1,]))
colnames(as.data.frame(train.h2o[1,]))[1]
source('~/Documents/Thesis/code/rollingDeepPredict.R')
source('~/Documents/Thesis/code/rollingDeepPredict.R')
source('~/Documents/Thesis/code/rollingDeepPredict.R')
source('~/Documents/Thesis/code/rollingDeepPredict.R')
source('~/Documents/Thesis/code/rollingDeepPredict.R')
error.deep = rollingDeepPredict(as.matrix(dtm),y,100,10)
setwd("~/Documents/Projects/ForestCover")
data = read.csv("train.csv")
data = data[sample(nrow(data)),]
train.x = data[1:14000,]
train.y = train.x$Cover_Type
train.x$Cover_Type = NULL
train.x$Id = NULL
test.x = data[14001:15120,]
test.y = test.x$Cover_Type
test.x$Cover_Type = NULL
test.x$Id = NULL
trainall.x = read.csv("train.csv")
trainall.y = trainall.x$Cover_Type
trainall.x$Cover_Type = NULL
trainall.x$Id = NULL
test = read.csv("test.csv")
id = test$Id
test$Id = NULL
h2o.predict
localH2O = new("H2OClient", ip = "127.0.0.1", port = 54321)
train = cbind(train.y,train.x)
train = as.h2o(localH2O,train,key='train')
test = as.h2p(localH2O,test.x,key='test')
localH2O = new("H2OClient", ip = "127.0.0.1", port = 54321)
train = as.h2o(localH2O,train,key='train')
